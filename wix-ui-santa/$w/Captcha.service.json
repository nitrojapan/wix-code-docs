{ "name": "Captcha",
  "memberOf": "$w",
  "mixes":
    [ "$w.Element",
      "$w.FocusMixin",
      "$w.HiddenCollapsedMixin" ],
  "labels":
    [ "removed" ],
  "location":
    { "lineno": 8,
      "filename": "Captcha.js" },
  "docs":
    { "summary": "The reCAPTCHA element allows you to present a challenge-response test to site visitors to determine whether they are human or a bot.",
      "description":
        [ "Use the reCAPTCHA element to verify that site visitors are human before",
          "allowing them to perform restricted operations such as data submission,",
          "login, or accessing private content.",
          "",
          " <h3 id=\"captcha-lifecycle\">Typical reCAPTCHA Validation Lifecycle</h3>",
          "",
          " The following outlines a typical reCAPTCHA validation lifecycle:",
          "",
          " 1. A button or another clickable element that triggers a submit, login, or another restricted operation is disabled, pending reCAPTCHA verification.",
          " 1. A site visitor completes the reCAPTCHA challenge. One of the following occurs:",
          "     * Verification: reCAPTCHA is verified. A reCAPTCHA [`token`]($w.Captcha.html#token) is generated. Use the [`onVerified()`]($w.Captcha.html#onVerified) event handler to enable the disabled clickable element.",
          "     * Error: reCAPTCHA fails verification. Use the [`onError()`]($w.Captcha.html#onError) event handler to [`reset()`]($w.Captcha.html#reset) the reCAPTCHA and ask the visitor to redo the challenge. Return to Step 1.",
          " 1. The clickable element is enabled. One of the following occurs:",
          "     * Click: The site visitor clicks the clickable element, triggering a backend function that calls [`authorize()`](wix-captcha-backend.html#authorize) with the generated [`token`]($w.Captcha.html#token).",
          "     * Timeout: The site visitor did not click within 120 seconds of token generation, causing the token to expire. When timeout occurs, the reCAPTCHA automatically resets and displays a message asking the site visitor to redo the challenge. Use the [`onTimeout()`]($w.Captcha.html#onTimeout) event handler to disable the clickable trigger. Return to Step 1.",
          " 1. [`authorize()`](wix-captcha-backend.html#authorize) checks whether the reCAPTCHA token is valid. One of the following occurs:",
          "     * Authorization: reCAPTCHA is authorized. Perform the restricted operation (such as data insert) in the backend function. [`reset()`]($w.Captcha.html#reset) the reCAPTCHA for future operations.",
          "     * Error: Token fails authorization. [`reset()`]($w.Captcha.html#reset) the reCAPTCHA and ask the visitor to redo the challenge. Return to Step 1.",
          "",
          "Important: To ensure complete protection, you must include backend [authorization](wix-captcha-backend.html#authorize) as a mandatory step of the reCAPTCHA validation lifecycle.",
          "",
          "",
          "For more information on working with your reCAPTCHA element, click <a href=\"https://support.wix.com/en/article/corvid-tutorial-using-captcha-to-protect-data-submission\" target=\"_blank\">here</a>." ],
      "links": [],
      "examples": [],
      "extra":
        {  } },
  "properties":
    [ { "name": "token",
        "labels": [],
        "get": true,
        "set": false,
        "type": "string",
        "locations":
          [ { "lineno": 50,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "Gets the reCAPTCHA token.",
            "description":
              [ "When a site visitor successfully completes a reCAPTCHA challenge, a reCAPTCHA `token`",
                " is generated. The token is used for backend authorization.",
                "",
                " Prior to completing the reCAPTCHA challenge and following timeout, the token returns `undefined`." ],
            "links": [],
            "examples":
              [ { "title": "Get the token of the verified reCAPTCHA",
                  "body":
                    [ "let myToken = $w(\"#myCaptcha\").token;",
                      "// \"01ABCDeFG23hijKlmn4...OPQ5r6stuvWXy\"" ],
                  "extra":
                    {  } },
                { "title": "Full reCAPTCHA lifecycle scenario",
                  "body":
                    [ "/************************************",
                      " * backend code - submitHandler.jsw *",
                      " ************************************/",
                      "",
                      "import wixCaptcha from 'wix-captcha-backend';",
                      "import wixData from 'wix-data';",
                      "",
                      "// Authorize token and insert data",
                      "export function processSubmission(submitRequestData) {",
                      "  return wixCaptcha.authorize(submitRequestData.token)",
                      "    .then (() => {",
                      "      return wixData.insert(\"MyCollection\", submitRequestData.data);",
                      "    });",
                      "}",
                      "",
                      "/********************",
                      " * client-side code *",
                      " ********************/",
                      "",
                      "import {processSubmission} from 'backend/submitHandler';",
                      "",
                      "$w.onReady(function () {",
                      "  // When user clicks submit button",
                      "  $w(\"#submitDataButton\").onClick(() =>",
                      "    let submitRequestData = {",
                      "      token: $w(\"#myCaptcha\").token,",
                      "      data: $w(\"#myInput\").value,",
                      "    }",
                      "    processSubmission(submitRequestData) // Call backend function",
                      "      .then( () => {",
                      "        $w(\"#myCaptcha\").reset();",
                      "        $w(\"#submitDataButton\").disable();",
                      "        $w(\"#messageText\").text = \"Data successfully submitted\";",
                      "        $w(\"#messageText\").show();",
                      "      })",
                      "      .catch( () => {",
                      "        $w(\"#myCaptcha\").reset();",
                      "        $w(\"#submitDataButton\").disable();",
                      "        $w(\"#messageText\").text = \"Something went wrong. Redo the reCAPTCHA challenge.\";",
                      "        $w(\"#messageText\").show();",
                      "      })",
                      "  }",
                      "",
                      "  // Error handler",
                      "  $w(\"#myCaptcha\").onError(() => {",
                      "    $w(\"#messageText\").text = \"Something went wrong. Redo the reCAPTCHA challenge.\";",
                      "    $w(\"#messageText\").show();",
                      "  })",
                      "",
                      "  // Verification handler",
                      "  $w(\"#myCaptcha\").onVerified(() => {",
                      "    $w(\"#submitDataButton\").enable();",
                      "    $w(\"#messageText\").hide();",
                      "  })",
                      "",
                      "  // Timeout handler",
                      "  $w(\"#myCaptcha\").onTimeout(() => {",
                      "    $w(\"#submitDataButton\").disable();",
                      "  })",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to use reCAPTCHA to protect a data insertion.\n We use a text input for the data, a reCAPTCHA element, and a submit button.\n The submit button is disabled until the site visitor completes the reCAPTCHA\n challenge and the reCAPTCHA is verified. Clicking the submit button triggers\n backend authorization of the token. If authorization is successful, the data\n is inserted into the collection." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "operations":
    [ { "name": "onError",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.Captcha.ErrorHandler",
              "doc": "The name of the function or\n the function expression to run when an error occurs." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 121,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when an error occurs while completing the reCAPTCHA challenge.",
            "description":
              [ "The `onError()` function allows you to perform actions when the reCAPTCHA element on the client side",
                "has a communication error with the reCAPTCHA provider.",
                "",
                "If an error occurs, the reCAPTCHA element automatically resets. You can",
                "ask the user to redo the challenge." ],
            "links": [],
            "examples":
              [ { "title": "Register a callback to run when an error occurs",
                  "body":
                    [ "$w(\"#myCaptcha\").onError(() => {",
                      "  $w(\"#messageText\").text = \"Something went wrong. Redo the reCAPTCHA challenge.\";",
                      "  $w(\"#messageText\").show();",
                      "})" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "onError" } },
      { "name": "onTimeout",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.Captcha.TimeoutHandler",
              "doc": "The name of the function or\n the function expression to run when a reCAPTCHA timeout occurs." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 165,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the reCAPTCHA token expires.",
            "description":
              [ "The `onTimeout()` function allows you to perform actions when a reCAPTCHA timeout occurs.",
                "",
                "When a site visitor completes a reCAPTCHA challenge, a [`token`]($w.Captcha.html#token) is",
                "generated. If 120 seconds pass without backend [authorization](wix-captcha-backend.html#authorize),",
                "the token expires and `onTimeout()` is called.",
                "",
                "When a timeout occurs, the reCAPTCHA automatically resets and displays a",
                "message asking the site visitor to redo the challenge. If you enabled the",
                "clickable element for triggering a restricted operation when the reCAPTCHA was verified, disable it." ],
            "links": [],
            "examples":
              [ { "title": "Register a callback to run when a timeout occurs",
                  "body":
                    [ "$w(\"#myCaptcha\").onTimeout(() => {",
                      "  $w(\"#signupButton\").disable();",
                      "})" ],
                  "extra":
                    {  } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "onTimeout" } },
      { "name": "onVerified",
        "labels": [],
        "nameParams": [],
        "params":
          [ { "name": "handler",
              "type": "$w.Captcha.VerifiedHandler",
              "doc": "The name of the function or\n the function expression to run when the reCAPTCHA is verified." } ],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 214,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "Adds an event handler that runs when the reCAPTCHA challenge is successfully completed.",
            "description":
              [ "Once the reCAPTCHA challenge has been successfully completed by the user, the `onVerified`",
                " callback is triggered and a reCAPTCHA token is generated.",
                "",
                " If the clickable element for triggering the submit or another",
                " restricted operation was disabled, enable it." ],
            "links": [],
            "examples":
              [ { "title": "Register a callback to run when the reCAPTCHA is verified",
                  "body":
                    [ "$w(\"#myCaptcha\").onVerified(() => {",
                      "  $w(\"#signupButton\").enable();",
                      "  let myToken = $w(\"#myCaptcha\").token;",
                      "})" ],
                  "extra":
                    {  } },
                { "title": "Full reCAPTCHA lifecycle scenario",
                  "body":
                    [ "/************************************",
                      " * backend code - submitHandler.jsw *",
                      " ************************************/",
                      "",
                      "import wixCaptcha from 'wix-captcha-backend';",
                      "import wixData from 'wix-data';",
                      "",
                      "// Authorize token and insert data",
                      "export function processSubmission(submitRequestData) {",
                      "  return wixCaptcha.authorize(submitRequestData.token)",
                      "    .then (() => {",
                      "      return wixData.insert(\"MyCollection\", submitRequestData.data);",
                      "    });",
                      "}",
                      "",
                      "/********************",
                      " * client-side code *",
                      " ********************/",
                      "",
                      "import {processSubmission} from 'backend/submitHandler';",
                      "",
                      "$w.onReady(function () {",
                      "  // When user clicks submit button",
                      "  $w(\"#submitDataButton\").onClick(() =>",
                      "    let submitRequestData = {",
                      "      token: $w(\"#myCaptcha\").token,",
                      "      data: $w(\"#myInput\").value,",
                      "    }",
                      "    processSubmission(submitRequestData) // Call backend function",
                      "      .then( () => {",
                      "        $w(\"#myCaptcha\").reset();",
                      "        $w(\"#submitDataButton\").disable();",
                      "        $w(\"#messageText\").text = \"Data successfully submitted\";",
                      "        $w(\"#messageText\").show();",
                      "      })",
                      "      .catch( () => {",
                      "        $w(\"#myCaptcha\").reset();",
                      "        $w(\"#submitDataButton\").disable();",
                      "        $w(\"#messageText\").text = \"Something went wrong. Redo the reCAPTCHA challenge.\";",
                      "        $w(\"#messageText\").show();",
                      "      })",
                      "  }",
                      "",
                      "  // Error handler",
                      "  $w(\"#myCaptcha\").onError(() => {",
                      "    $w(\"#messageText\").text = \"Something went wrong. Redo the reCAPTCHA challenge.\";",
                      "    $w(\"#messageText\").show();",
                      "  })",
                      "",
                      "  // Verification handler",
                      "  $w(\"#myCaptcha\").onVerified(() => {",
                      "    $w(\"#submitDataButton\").enable();",
                      "    $w(\"#messageText\").hide();",
                      "  })",
                      "",
                      "  // Timeout handler",
                      "  $w(\"#myCaptcha\").onTimeout(() => {",
                      "    $w(\"#submitDataButton\").disable();",
                      "  })",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to use reCAPTCHA to protect a data insertion.\n We use a text input for the data, a reCAPTCHA element, and a submit button.\n The submit button is disabled until the site visitor completes the reCAPTCHA\n challenge and the reCAPTCHA is verified. Clicking the submit button triggers\n backend authorization of the token. If authorization is successful, the data\n is inserted into the collection." } } ],
            "extra":
              {  } },
        "extra":
          { "eventType": "onVerified" } },
      { "name": "reset",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "Fulfilled - When the reCAPTCHA has been reset." },
        "locations":
          [ { "lineno": 74,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "Resets the reCAPTCHA challenge.",
            "description":
              [ "`reset()` the reCAPTCHA when there is a reCAPTCHA error. Also use `reset()`",
                "when the operation restricted by the reCAPTCHA element is successfully completed",
                "to enable the reCAPTCHA for the next operation." ],
            "links": [],
            "examples":
              [ { "title": "Reset the reCAPTCHA element",
                  "body":
                    [ "$w(\"#myCaptcha\").reset();" ],
                  "extra":
                    {  } },
                { "title": "Full reCAPTCHA lifecycle scenario",
                  "body":
                    [ "/************************************",
                      " * backend code - submitHandler.jsw *",
                      " ************************************/",
                      "",
                      "import wixCaptcha from 'wix-captcha-backend';",
                      "import wixData from 'wix-data';",
                      "",
                      "// Authorize token and insert data",
                      "export function processSubmission(submitRequestData) {",
                      "  return wixCaptcha.authorize(submitRequestData.token)",
                      "    .then (() => {",
                      "      return wixData.insert(\"MyCollection\", submitRequestData.data);",
                      "    });",
                      "}",
                      "",
                      "/********************",
                      " * client-side code *",
                      " ********************/",
                      "",
                      "import {processSubmission} from 'backend/submitHandler';",
                      "",
                      "$w.onReady(function () {",
                      "  // When user clicks submit button",
                      "  $w(\"#submitDataButton\").onClick(() =>",
                      "    let submitRequestData = {",
                      "      token: $w(\"#myCaptcha\").token,",
                      "      data: $w(\"#myInput\").value,",
                      "    }",
                      "    processSubmission(submitRequestData) // Call backend function",
                      "      .then( () => {",
                      "        $w(\"#myCaptcha\").reset();",
                      "        $w(\"#submitDataButton\").disable();",
                      "        $w(\"#messageText\").text = \"Data successfully submitted\";",
                      "        $w(\"#messageText\").show();",
                      "      })",
                      "      .catch( () => {",
                      "        $w(\"#myCaptcha\").reset();",
                      "        $w(\"#submitDataButton\").disable();",
                      "        $w(\"#messageText\").text = \"Something went wrong. Redo the reCAPTCHA challenge.\";",
                      "        $w(\"#messageText\").show();",
                      "      })",
                      "  }",
                      "",
                      "  // Error handler",
                      "  $w(\"#myCaptcha\").onError(() => {",
                      "    $w(\"#messageText\").text = \"Something went wrong. Redo the reCAPTCHA challenge.\";",
                      "    $w(\"#messageText\").show();",
                      "  })",
                      "",
                      "  // Verification handler",
                      "  $w(\"#myCaptcha\").onVerified(() => {",
                      "    $w(\"#submitDataButton\").enable();",
                      "    $w(\"#messageText\").hide();",
                      "  })",
                      "",
                      "  // Timeout handler",
                      "  $w(\"#myCaptcha\").onTimeout(() => {",
                      "    $w(\"#submitDataButton\").disable();",
                      "  })",
                      "});",
                      "" ],
                  "extra":
                    { "description": "This example demonstrates how to use reCAPTCHA to protect a data insertion.\n We use a text input for the data, a reCAPTCHA element, and a submit button.\n The submit button is disabled until the site visitor completes the reCAPTCHA\n challenge and the reCAPTCHA is verified. Clicking the submit button triggers\n backend authorization of the token. If authorization is successful, the data\n is inserted into the collection." } } ],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "callbacks":
    [ { "name": "ErrorHandler",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 114,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "An error event handler.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "TimeoutHandler",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 158,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "A timeout event handler.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "VerificationHandler",
        "labels":
          [ "removed" ],
        "nameParams": [],
        "params": [],
        "ret":
          { "type": "void" },
        "locations":
          [ { "lineno": 192,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "A verification event handler.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } },
      { "name": "VerifiedHandler",
        "labels": [],
        "nameParams": [],
        "params": [],
        "ret":
          { "type":
              { "name": "Promise",
                "typeParams":
                  [ "void" ] },
            "doc": "" },
        "locations":
          [ { "lineno": 206,
              "filename": "Captcha.js" } ],
        "docs":
          { "summary": "A verification event handler.",
            "links": [],
            "examples": [],
            "extra":
              {  } },
        "extra":
          {  } } ],
  "messages": [],
  "extra":
    { "notes":
        [ "The reCAPTCHA element does not offer protection for data submission performed via a dataset. To protect data submission with reCAPTCHA, use code to perform the data operation (for example, [`insert()`](wix-data.html#insert) or [`save()`](wix-data.html#save))." ],
      "queryable": true } }